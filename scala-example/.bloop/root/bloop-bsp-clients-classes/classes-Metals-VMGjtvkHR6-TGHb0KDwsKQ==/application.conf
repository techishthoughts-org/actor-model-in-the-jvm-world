akka {
  # Logging configuration
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  # logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Log configuration on start
  log-config-on-start = off

  # Actor system configuration
  actor {
    # Enable debug logging for actor lifecycle and message reception
    debug {
      receive = on        # Log all messages sent to an actor
      autoreceive = on    # Log special messages (Kill, PoisonPill, etc.)
      lifecycle = on      # Log actor lifecycle events (start, stop, restart)
      fsm = off           # Log FSM transitions (not used in this demo)
      event-stream = off  # Log event stream subscriptions
      unhandled = on      # Log unhandled messages
    }

    # Default dispatcher configuration
    default-dispatcher {
      type = "Dispatcher"
      executor = "default-executor"
      default-executor {
        fallback = "fork-join-executor"
      }

      # Throughput for batching messages
      throughput = 5

      # Mailbox configuration
      mailbox-capacity = -1  # Unbounded mailbox
      mailbox-push-timeout-time = 10s

      fork-join-executor {
        parallelism-min = 2
        parallelism-factor = 2.0
        parallelism-max = 10
      }
    }

    # Custom dispatcher for high-throughput actors
    high-throughput-dispatcher {
      type = "Dispatcher"
      executor = "fork-join-executor"
      fork-join-executor {
        parallelism-min = 8
        parallelism-factor = 3.0
        parallelism-max = 64
      }
      throughput = 100
    }

    # Default mailbox configuration
    default-mailbox {
      mailbox-type = "akka.dispatch.UnboundedMailbox"
      mailbox-capacity = 1000
      mailbox-push-timeout-time = 10s
    }

        # Serialization configuration
    serializers {
      java = "akka.serialization.JavaSerializer"
    }

    serialization-bindings {
      "java.io.Serializable" = java
    }

    # Provider configuration (for clustering later)
    provider = "akka.actor.LocalActorRefProvider"

    # Guardian supervisor strategy
    guardian-supervisor-strategy = "akka.actor.DefaultSupervisorStrategy"

    # Actor creation timeout
    creation-timeout = 20s

    # Ask timeout for request-response patterns
    ask-timeout = 5s
  }

  # Remote configuration (disabled for local demo)
  remote.artery.enabled = false

  # Cluster configuration (disabled for local demo)
  cluster.enabled = false

  # Extensions
  extensions = []

  # JVM exit configuration
  jvm-exit-on-fatal-error = true

  # Coordinated shutdown
  coordinated-shutdown {
    terminate-actor-system = on
    run-by-actor-system-terminate = on
    run-by-clr-shutdown-hook = on
    run-by-jvm-shutdown-hook = on
    default-phase-timeout = 5 seconds
    exit-jvm = on
  }

  # Stream configuration (for future use)
  stream {
    materializer {
      initial-input-buffer-size = 4
      max-input-buffer-size = 16
      dispatcher = "akka.actor.default-dispatcher"
    }
  }

  # HTTP configuration (for future REST API)
  http {
    server {
      server-header = "akka-http/demo"
      idle-timeout = 60s
      request-timeout = 20s
      max-connections = 1024
    }

    client {
      connecting-timeout = 10s
      idle-timeout = 60s
    }

    host-connection-pool {
      max-connections = 4
      min-connections = 0
      max-open-requests = 32
    }
  }

  # JVM shutdown hooks
  jvm-shutdown-hooks = on
}

# Custom application configuration
demo {
  # Actor system name
  system-name = "actor-model-demo"

  # Demo configuration
  workers {
    # Number of worker actors to create
    count = 2

    # Worker names
    names = ["Gabriel", "Rafael"]

    # Default status for workers
    default-status = "Idle"

    initial-status = "Idle"
    timeout = 5 seconds
    max-retries = 3
  }

  # Message timeouts
  timeouts {
    ask-timeout = 5s
    coordination-timeout = 2s
    shutdown-timeout = 10s
  }

  # Slack simulation configuration
  slack {
    # Enable slack message coordination
    enabled = true

    # Message processing delay simulation
    processing-delay = 100ms
  }

  # Coordinator configuration
  coordinator {
    message-timeout = 2 seconds
    status-check-interval = 1 second
  }

  # Simple actor configuration
  simple-actors {
    buffer-size = 100
    enable-logging = true
  }
}

# SLF4J configuration (if using logback)
slf4j {
  # Logger implementation
  logger-factory = "ch.qos.logback.classic.util.ContextSelectorStaticBinder"
}

# Environment-specific overrides
# Uncomment and modify for different environments

# Development environment
# include "dev.conf"

# Staging environment
# include "staging.conf"

# Production environment
# include "prod.conf"
